"""Test firmware update sensors and controls."""

from unittest.mock import AsyncMock, MagicMock

import pytest
from homeassistant.config_entries import ConfigEntry

from custom_components.hass_dyson.binary_sensor import DysonFirmwareUpdateAvailableSensor
from custom_components.hass_dyson.const import CONF_DISCOVERY_METHOD, CONF_SERIAL_NUMBER, DISCOVERY_CLOUD, DOMAIN
from custom_components.hass_dyson.coordinator import DysonDataUpdateCoordinator
from custom_components.hass_dyson.switch import DysonFirmwareAutoUpdateSwitch


class MockFirmwareObject:
    """Mock firmware object for testing."""

    def __init__(self, version="21.01.08", auto_update_enabled=True, new_version_available=False):
        self.version = version
        self.auto_update_enabled = auto_update_enabled
        self.new_version_available = new_version_available
        self.capabilities = ["AdvanceOscillationDay1", "Scheduling", "EnvironmentalData"]


class MockConnectedConfiguration:
    """Mock connected configuration for testing."""

    def __init__(self, firmware_obj):
        self.firmware = firmware_obj


class MockDeviceInfo:
    """Mock device info for testing."""

    def __init__(self, firmware_obj):
        self.connected_configuration = MockConnectedConfiguration(firmware_obj)


@pytest.fixture
def mock_hass():
    """Mock Home Assistant instance."""
    hass = MagicMock()
    hass.data = {DOMAIN: {}}
    hass.add_job = MagicMock()
    return hass


@pytest.fixture
def mock_config_entry():
    """Mock config entry for cloud device."""
    config_entry = MagicMock(spec=ConfigEntry)
    config_entry.data = {
        CONF_SERIAL_NUMBER: "MOCK-SERIAL-TEST123",
        CONF_DISCOVERY_METHOD: DISCOVERY_CLOUD,
    }
    config_entry.entry_id = "test_entry_id"
    return config_entry


@pytest.fixture
def mock_coordinator(mock_hass, mock_config_entry):
    """Mock coordinator with firmware information."""
    coordinator = MagicMock(spec=DysonDataUpdateCoordinator)
    coordinator.config_entry = mock_config_entry
    coordinator._device_capabilities = ["AdvanceOscillationDay1", "Scheduling"]
    coordinator._device_category = ["ec"]
    coordinator._firmware_version = "21.01.08"
    coordinator._firmware_auto_update_enabled = True
    coordinator._firmware_update_available = False

    # Mock properties
    coordinator.device_name = "Test Dyson Device"
    coordinator.serial_number = "MOCK-SERIAL-TEST123"
    coordinator.device_capabilities = ["AdvanceOscillationDay1", "Scheduling"]
    coordinator.device_category = ["ec"]
    coordinator.firmware_version = "21.01.08"
    coordinator.firmware_auto_update_enabled = True
    coordinator.firmware_update_available = False

    # Mock methods
    coordinator.async_update_listeners = MagicMock()
    coordinator.async_set_firmware_auto_update = AsyncMock(return_value=True)

    return coordinator


class TestFirmwareUpdateExtraction:
    """Test firmware update information extraction."""

    def test_extract_firmware_version_with_update_info(self):
        """Test extracting firmware version and update information."""
        # Test the method directly on a mock coordinator
        mock_coordinator = MagicMock()
        mock_coordinator._firmware_version = "Unknown"
        mock_coordinator._firmware_auto_update_enabled = False
        mock_coordinator._firmware_update_available = False

        # Create mock device info with firmware update available
        firmware_obj = MockFirmwareObject(
            version="21.01.08",
            auto_update_enabled=False,
            new_version_available=True
        )
        device_info = MockDeviceInfo(firmware_obj)

        # Call the real method on the mock object
        DysonDataUpdateCoordinator._extract_firmware_version(mock_coordinator, device_info)

        assert mock_coordinator._firmware_version == "21.01.08"
        assert mock_coordinator._firmware_auto_update_enabled is False
        assert mock_coordinator._firmware_update_available is True

    def test_extract_firmware_version_no_update_available(self):
        """Test extracting firmware info when no update is available."""
        mock_coordinator = MagicMock()
        mock_coordinator._firmware_version = "Unknown"
        mock_coordinator._firmware_auto_update_enabled = False
        mock_coordinator._firmware_update_available = False

        firmware_obj = MockFirmwareObject(
            version="21.01.10",
            auto_update_enabled=True,
            new_version_available=False
        )
        device_info = MockDeviceInfo(firmware_obj)

        DysonDataUpdateCoordinator._extract_firmware_version(mock_coordinator, device_info)

        assert mock_coordinator._firmware_version == "21.01.10"
        assert mock_coordinator._firmware_auto_update_enabled is True
        assert mock_coordinator._firmware_update_available is False

    def test_extract_firmware_version_missing_fields(self):
        """Test extraction when some firmware fields are missing."""
        mock_coordinator = MagicMock()
        mock_coordinator._firmware_version = "Unknown"
        mock_coordinator._firmware_auto_update_enabled = False
        mock_coordinator._firmware_update_available = False

        # Create firmware object without update fields
        firmware_obj = MagicMock()
        firmware_obj.version = "21.01.09"
        # Make auto_update_enabled and new_version_available raise AttributeError
        del firmware_obj.auto_update_enabled
        del firmware_obj.new_version_available

        device_info = MockDeviceInfo(firmware_obj)
        DysonDataUpdateCoordinator._extract_firmware_version(mock_coordinator, device_info)

        assert mock_coordinator._firmware_version == "21.01.09"
        assert mock_coordinator._firmware_auto_update_enabled is False  # Default
        assert mock_coordinator._firmware_update_available is False  # Default


class TestFirmwareUpdateAvailableSensor:
    """Test firmware update available binary sensor."""

    def test_sensor_initialization(self, mock_coordinator):
        """Test sensor initialization."""
        sensor = DysonFirmwareUpdateAvailableSensor(mock_coordinator)

        assert sensor.unique_id == "MOCK-SERIAL-TEST123_firmware_update_available"
        assert sensor.name == "Test Dyson Device Firmware Update Available"
        assert sensor.device_class == "update"
        assert sensor.entity_category == "diagnostic"

    def test_sensor_is_on_no_update(self, mock_coordinator):
        """Test sensor when no update is available."""
        mock_coordinator._firmware_update_available = False
        sensor = DysonFirmwareUpdateAvailableSensor(mock_coordinator)

        assert sensor.is_on is False

    def test_sensor_is_on_update_available(self, mock_coordinator):
        """Test sensor when update is available."""
        mock_coordinator.firmware_update_available = True
        sensor = DysonFirmwareUpdateAvailableSensor(mock_coordinator)

        assert sensor.is_on is True

    def test_sensor_extra_state_attributes(self, mock_coordinator):
        """Test sensor state attributes."""
        mock_coordinator.firmware_version = "21.01.08"
        mock_coordinator.firmware_auto_update_enabled = True
        mock_coordinator.firmware_update_available = False

        sensor = DysonFirmwareUpdateAvailableSensor(mock_coordinator)
        attrs = sensor.extra_state_attributes

        assert attrs is not None
        assert attrs["current_firmware_version"] == "21.01.08"
        assert attrs["auto_update_enabled"] is True


class TestFirmwareAutoUpdateSwitch:
    """Test firmware auto-update switch."""

    def test_switch_initialization(self, mock_coordinator):
        """Test switch initialization."""
        switch = DysonFirmwareAutoUpdateSwitch(mock_coordinator)

        assert switch.unique_id == "MOCK-SERIAL-TEST123_firmware_auto_update"
        assert switch.name == "Test Dyson Device Firmware Auto Update"
        assert switch.entity_category == "config"

    def test_switch_is_on_enabled(self, mock_coordinator):
        """Test switch when auto-update is enabled."""
        mock_coordinator._firmware_auto_update_enabled = True
        switch = DysonFirmwareAutoUpdateSwitch(mock_coordinator)

        assert switch.is_on is True

    def test_switch_is_on_disabled(self, mock_coordinator):
        """Test switch when auto-update is disabled."""
        mock_coordinator.firmware_auto_update_enabled = False
        switch = DysonFirmwareAutoUpdateSwitch(mock_coordinator)

        assert switch.is_on is False

    def test_switch_extra_state_attributes(self, mock_coordinator):
        """Test switch state attributes."""
        mock_coordinator.firmware_version = "21.01.08"
        mock_coordinator.firmware_update_available = True

        switch = DysonFirmwareAutoUpdateSwitch(mock_coordinator)
        attrs = switch.extra_state_attributes

        assert attrs is not None
        assert attrs["current_firmware_version"] == "21.01.08"
        assert attrs["update_available"] is True

    @pytest.mark.asyncio
    async def test_switch_turn_on(self, mock_coordinator):
        """Test turning on auto-update."""
        mock_coordinator.async_set_firmware_auto_update = AsyncMock(return_value=True)
        switch = DysonFirmwareAutoUpdateSwitch(mock_coordinator)

        await switch.async_turn_on()

        mock_coordinator.async_set_firmware_auto_update.assert_called_once_with(True)

    @pytest.mark.asyncio
    async def test_switch_turn_off(self, mock_coordinator):
        """Test turning off auto-update."""
        mock_coordinator.async_set_firmware_auto_update = AsyncMock(return_value=True)
        switch = DysonFirmwareAutoUpdateSwitch(mock_coordinator)

        await switch.async_turn_off()

        mock_coordinator.async_set_firmware_auto_update.assert_called_once_with(False)


class TestCoordinatorFirmwareAutoUpdate:
    """Test coordinator firmware auto-update functionality."""

    @pytest.mark.asyncio
    async def test_set_firmware_auto_update_cloud_device(self, mock_coordinator):
        """Test setting firmware auto-update for cloud device."""
        # Configure the mock coordinator to simulate actual method behavior
        async def mock_set_auto_update(enabled):
            mock_coordinator._firmware_auto_update_enabled = enabled
            mock_coordinator.async_update_listeners()
            return True

        mock_coordinator.async_set_firmware_auto_update = mock_set_auto_update
        mock_coordinator._firmware_auto_update_enabled = False
        mock_coordinator.firmware_auto_update_enabled = property(lambda self: self._firmware_auto_update_enabled)

        # Test enabling auto-update
        result = await mock_coordinator.async_set_firmware_auto_update(True)

        assert result is True
        assert mock_coordinator._firmware_auto_update_enabled is True
        mock_coordinator.async_update_listeners.assert_called_once()

    def test_set_firmware_auto_update_non_cloud_device_mock(self):
        """Test setting firmware auto-update for non-cloud device using mocks."""
        # Use simple mock approach instead of creating real coordinator
        mock_coordinator = MagicMock()

        # Simulate non-cloud device behavior
        async def mock_set_auto_update_non_cloud(enabled):
            return False  # Non-cloud devices should return False

        mock_coordinator.async_set_firmware_auto_update = mock_set_auto_update_non_cloud

        # Test that it returns False for non-cloud devices
        import asyncio
        result = asyncio.run(mock_coordinator.async_set_firmware_auto_update(True))
        assert result is False

    def test_coordinator_properties(self, mock_coordinator):
        """Test coordinator firmware-related properties."""
        mock_coordinator._firmware_version = "21.01.08"
        mock_coordinator._firmware_auto_update_enabled = True
        mock_coordinator._firmware_update_available = False

        assert mock_coordinator.firmware_version == "21.01.08"
        assert mock_coordinator.firmware_auto_update_enabled is True
        assert mock_coordinator.firmware_update_available is False


@pytest.mark.asyncio
async def test_binary_sensor_setup_cloud_device(mock_hass, mock_config_entry):
    """Test that firmware update sensor is added for cloud devices."""
    from custom_components.hass_dyson.binary_sensor import async_setup_entry
    from custom_components.hass_dyson.const import DISCOVERY_CLOUD

    # Set up as cloud device
    mock_config_entry.data = {CONF_DISCOVERY_METHOD: DISCOVERY_CLOUD}

    # Mock coordinator
    coordinator = MagicMock()
    coordinator.device_category = ["ec"]
    coordinator.device_capabilities = ["AdvanceOscillationDay1"]
    coordinator.serial_number = "MOCK-SERIAL-TEST123"

    mock_hass.data = {DOMAIN: {mock_config_entry.entry_id: coordinator}}

    # Mock async_add_entities
    async_add_entities = MagicMock()

    # Test setup
    result = await async_setup_entry(mock_hass, mock_config_entry, async_add_entities)

    assert result is True
    # Verify that async_add_entities was called with entities including our firmware sensor
    async_add_entities.assert_called_once()
    added_entities = async_add_entities.call_args[0][0]

    # Check that at least one entity is DysonFirmwareUpdateAvailableSensor
    has_firmware_sensor = any(
        isinstance(entity, DysonFirmwareUpdateAvailableSensor) for entity in added_entities
    )
    assert has_firmware_sensor


@pytest.mark.asyncio
async def test_switch_setup_cloud_device(mock_hass, mock_config_entry):
    """Test that firmware auto-update switch is added for cloud devices."""
    from custom_components.hass_dyson.const import DISCOVERY_CLOUD
    from custom_components.hass_dyson.switch import async_setup_entry

    # Set up as cloud device
    mock_config_entry.data = {CONF_DISCOVERY_METHOD: DISCOVERY_CLOUD}

    # Mock coordinator
    coordinator = MagicMock()
    coordinator.device_capabilities = ["Heating", "ContinuousMonitoring"]
    coordinator.serial_number = "MOCK-SERIAL-TEST123"

    mock_hass.data = {DOMAIN: {mock_config_entry.entry_id: coordinator}}

    # Mock async_add_entities
    async_add_entities = MagicMock()

    # Test setup
    result = await async_setup_entry(mock_hass, mock_config_entry, async_add_entities)

    assert result is True
    # Verify that async_add_entities was called with entities including our firmware switch
    async_add_entities.assert_called_once()
    added_entities = async_add_entities.call_args[0][0]

    # Check that at least one entity is DysonFirmwareAutoUpdateSwitch
    has_firmware_switch = any(
        isinstance(entity, DysonFirmwareAutoUpdateSwitch) for entity in added_entities
    )
    assert has_firmware_switch
