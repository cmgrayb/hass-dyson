# DevContainer Test Workflow with Advanced Layer Caching
#
# Caching Strategy:
# 1. Multi-source cache lookup: latest, branch-specific, main fallbacks
# 2. Cache images stored in GitHub Container Registry (GHCR)
# 3. Only pushes cache images from main branch (on push events)
# 4. PR builds benefit from existing cache without publishing
# 5. Pre-pull attempts to warm Docker daemon cache
#
# Cache Benefits:
# - Faster devcontainer builds (reuse base layers)
# - Reduced GitHub Actions minutes usage
# - Better developer experience with quicker feedback
# - Efficient use of registry storage with automatic cleanup

name: DevContainer Test

permissions:
  contents: read
  packages: write
  id-token: write

on:
  push:
    branches: [main, develop]
    paths:
      - ".devcontainer/**"
      - "requirements-dev.txt"
      - "pyproject.toml"
  pull_request:
    branches: [main]
    paths:
      - ".devcontainer/**"
      - "requirements-dev.txt"
      - "pyproject.toml"

jobs:
  test-devcontainer:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest
            network=host

      - name: Pre-pull cache images (ignore failures)
        run: |
          echo "🔄 Attempting to pre-pull cache images for faster builds..."
          docker pull ghcr.io/${{ github.repository }}/devcontainer-cache:latest || echo "No latest cache found - will build from scratch"
          echo "✅ Cache pre-pull completed"

      - name: Build and test devcontainer
        uses: devcontainers/ci@v0.3
        env:
          BUILDKIT_PROGRESS: plain
          DOCKER_BUILDKIT: 1
        with:
          imageName: ghcr.io/${{ github.repository }}/devcontainer-cache
          imageTag: latest
          cacheFrom: ghcr.io/${{ github.repository }}/devcontainer-cache:latest
          push: filter
          refFilterForPush: refs/heads/main
          eventFilterForPush: push
          runCmd: |
            echo "🏗️  DevContainer build completed with layer caching enabled"
            echo "📊 Cache strategy: Multi-source with branch-specific and latest fallbacks"
            echo ""
            # Verify development environment
            python --version
            pip --version

            # Verify packages are installed
            python -c "import homeassistant; print(f'Home Assistant: {homeassistant.__version__}')"
            python -c "import pytest; print(f'Pytest: {pytest.__version__}')"
            python -c "import ruff; print('Ruff: OK')"
            python -c "import mypy; print('mypy: OK')"

            # Verify our package installs correctly
            pip install -e .
            python -c "import custom_components.hass_dyson; print('Integration import: OK')"

            # Run basic tests
            python -m pytest tests/test_basic.py -v

            # Run code quality checks
            python -m ruff format --check .
            python -m ruff check .

            echo "✅ DevContainer environment verified successfully!"

      - name: Cache and build summary
        if: always()
        run: |
          echo "## DevContainer Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Caching Strategy Used" >> $GITHUB_STEP_SUMMARY
          echo "- **Cache Sources**: latest, ${{ github.ref_name }}, main" >> $GITHUB_STEP_SUMMARY
          echo "- **Registry**: GitHub Container Registry (GHCR)" >> $GITHUB_STEP_SUMMARY
          echo "- **Image**: \`ghcr.io/${{ github.repository }}/devcontainer-cache\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ github.event_name }}" = "push" ] && [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "🚀 **Cache Published**: This build updated the cache for future runs" >> $GITHUB_STEP_SUMMARY
          else
            echo "📥 **Cache Consumed**: This build used existing cache (no publish)" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Performance Benefits" >> $GITHUB_STEP_SUMMARY
          echo "- Faster devcontainer builds through layer reuse" >> $GITHUB_STEP_SUMMARY
          echo "- Reduced GitHub Actions minutes consumption" >> $GITHUB_STEP_SUMMARY
          echo "- Improved developer workflow feedback speed" >> $GITHUB_STEP_SUMMARY
