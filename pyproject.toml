[build-system]
requires = ["setuptools>=80.9.0", "wheel"]
build-backend = "setuptools.build_meta"
# Cache-bust for GitHub Actions: AsyncDysonClient import fix 2025-09-13

[project]
name = "hass-dyson"
version = "0.18.1-beta.2"
description = "Home Assistant Dyson integration focusing on device capabilities and connection information"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "cmgrayb"},
]
keywords = ["home-assistant", "dyson", "integration", "custom-component"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Home Automation",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.10"
dependencies = [
    "homeassistant>=2025.8.0",
    "aiohttp>=3.12.15",
    "cryptography==45.0.3",
    "requests>=2.32.4",
    "libdyson-rest==0.8.0b7",
    "paho-mqtt>=2.1.0",
]

[project.optional-dependencies]
dev = [
    "ruff==0.14.1",
    "pytest==8.4.2",
    "pytest-cov>=7.0.0",
    "pytest-asyncio==1.2.0",
    "pytest-homeassistant-custom-component==0.13.282",
    "mypy==1.18.2",
    "types-requests==2.32.4.20250913",
    "types-cryptography==3.3.23.2",
    "bandit==1.8.6",
    "safety==3.6.2",
    "responses==0.25.8",
    "aioresponses==0.7.8",
    "pytest-mock==3.15.1",
]

[project.urls]
Homepage = "https://github.com/cmgrayb/ha-dyson-alt"
Repository = "https://github.com/cmgrayb/ha-dyson-alt"
Issues = "https://github.com/cmgrayb/ha-dyson-alt/issues"

[tool.setuptools.packages.find]
where = ["custom_components"]
include = ["hass_dyson*"]

[tool.black]
line-length = 120
target-version = ['py39', 'py310', 'py311', 'py312', 'py313']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
# Home Assistant Core compliance settings
line-length = 88  # Home Assistant standard
target-version = "py312"

[tool.ruff.format]
# Use double quotes for strings
quote-style = "double"
# Use spaces around the equals sign in keyword arguments
skip-magic-trailing-comma = false

[tool.ruff.lint]
select = [
    # Pycodestyle
    "E", "W",
    # Pyflakes  
    "F",
    # Import sorting (isort)
    "I",
    # Comprehensions
    "C4",
    # Builtin type comparisons
    "UP",
    # Quotes
    "Q",
]
ignore = [
    # Allow line too long if black can't fix it
    "E501",
    # Allow lambda assignments
    "E731",
    # Disable trailing comma rule to avoid formatter conflicts
    "COM812",
]

[tool.ruff.lint.isort]
known-first-party = ["custom_components.hass_dyson"]
known-third-party = ["homeassistant"]
combine-as-imports = true

[tool.isort]
profile = "black"
line_length = 120
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
known_first_party = ["custom_components.hass_dyson"]
known_third_party = ["homeassistant"]

[tool.mypy]
python_version = "3.13"
show_error_codes = true
follow_imports = "silent"
ignore_missing_imports = true
strict_optional = false
warn_redundant_casts = false
warn_unused_ignores = false
warn_unreachable = false
warn_return_any = false
warn_unused_configs = false
no_implicit_reexport = false
check_untyped_defs = false
disallow_any_generics = false
disallow_incomplete_defs = false
disallow_subclassing_any = false
disallow_untyped_calls = false
disallow_untyped_decorators = false
disallow_untyped_defs = false
# Only check for basic syntax and import errors
disable_error_code = [
    # "assignment",  # Re-enabled - type assignment checks
    # "arg-type",    # Re-enabled - argument type checks (8 issues fixed)
    # "attr-defined",   # Testing - attribute definitions
    # "var-annotated",  # Re-enabled - variables need type annotations
    # "no-untyped-def",  # Re-enabled - functions need type annotations
    # "union-attr",     # Re-enabled - attribute access on union types (already compliant)
    # "no-any-return",  # Re-enabled - function returns Any (already compliant)
    # "no-untyped-call", # Re-enabled - calling untyped functions (already compliant)
    # "type-arg",       # Re-enabled - generic type argument issues (already compliant)
    # "unreachable"     # Re-enabled - unreachable code (already compliant)
]
exclude = [
    "build/",
    "dist/",
    ".venv/",
    "venv/",
    ".git/",
    "__pycache__/",
    ".pytest_cache/",
    ".mypy_cache/",
    "docker/",
]

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_untyped_calls = false

[[tool.mypy.overrides]]
module = [
    "custom_components.hass_dyson.*",
    "homeassistant.*",
]
disallow_subclassing_any = false
disallow_any_generics = false

[tool.pytest.ini_options]
testpaths = ["tests"]
norecursedirs = [".git", ".tox", "dist", "build", "south_migrations"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
# Coverage is enabled by default but with fail-under=0 to allow tests to run
# The dedicated "coverage" job in GitHub Actions enforces the actual coverage requirements
addopts = [
    "--cov=custom_components.hass_dyson",
    "--cov-report=term-missing",
    "--cov-report=xml",
    "--cov-report=html",
    "--cov-branch",  # Enable branch coverage to match GitHub workflow
    "--cov-fail-under=0",  # No failure threshold - handled by dedicated coverage job
    "--strict-markers",
    "-v"
]
# Configure asyncio settings to handle event loop cleanup better
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
asyncio_default_test_loop_scope = "function"
filterwarnings = [
    "ignore::RuntimeWarning:asyncio.*",
    "ignore::RuntimeWarning:.*asyncio.*",
    "ignore::DeprecationWarning:datetime.*",
    "ignore::ResourceWarning",
    "ignore:Event loop is closed:RuntimeWarning",
    "ignore:coroutine.*was never awaited:RuntimeWarning",
    "ignore:.*shutdown_default_executor.*was never awaited:RuntimeWarning", 
    "ignore:.*BaseEventLoop.shutdown_default_executor.*:RuntimeWarning",
    "ignore:.*unawaited coroutine.*:RuntimeWarning",
    "ignore:.*was never awaited.*:RuntimeWarning",
    "ignore::RuntimeWarning:_pytest.*",
    "ignore::RuntimeWarning:coverage.*",
    "ignore::RuntimeWarning:unittest.mock.*",
    "ignore::RuntimeWarning:pytest.*",
    "ignore::RuntimeWarning:gc.*",
    "ignore::RuntimeWarning:weakref.*",
    "ignore::RuntimeWarning:functools.*",
    "ignore::RuntimeWarning",
]
markers = [
    "asyncio: marks tests as async",
    "integration: marks tests as integration tests", 
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["custom_components/hass_dyson"]
branch = true  # Enable branch coverage measurement
omit = [
    "*/tests/*",
    "*/test_*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101", "B601"]






